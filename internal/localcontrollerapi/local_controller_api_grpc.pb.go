// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: internal/localcontrollerapi/local_controller_api.proto

package localcontrollerapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LocalControllerAPI_ApplySandbox_FullMethodName    = "/localcontrollerapi.LocalControllerAPI/ApplySandbox"
	LocalControllerAPI_CheckSandbox_FullMethodName    = "/localcontrollerapi.LocalControllerAPI/CheckSandbox"
	LocalControllerAPI_DeleteSandbox_FullMethodName   = "/localcontrollerapi.LocalControllerAPI/DeleteSandbox"
	LocalControllerAPI_LocalNetChannel_FullMethodName = "/localcontrollerapi.LocalControllerAPI/LocalNetChannel"
	LocalControllerAPI_Shutdown_FullMethodName        = "/localcontrollerapi.LocalControllerAPI/Shutdown"
)

// LocalControllerAPIClient is the client API for LocalControllerAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LocalControllerAPIClient interface {
	// This method is used to create a sandbox with local references.
	// The local controller (signadot local connect) should be running,
	// otherwise it will return an error
	ApplySandbox(ctx context.Context, in *ApplySandboxRequest, opts ...grpc.CallOption) (*ApplySandboxResponse, error)
	// This method tells if a given sandbox is managed by the local controller
	// or not
	CheckSandbox(ctx context.Context, in *CheckSandboxRequest, opts ...grpc.CallOption) (*CheckSandboxResponse, error)
	// This method requests the deletion of a sandbox. It will fail if the specified
	// sandbox is not managed by the local controller
	DeleteSandbox(ctx context.Context, in *DeleteSandboxRequest, opts ...grpc.CallOption) (*DeleteSandboxResponse, error)
	// This is a communication channel between the localnet process and the
	// local controller. It assumes that the connection is established by the
	// localnet process.
	LocalNetChannel(ctx context.Context, opts ...grpc.CallOption) (LocalControllerAPI_LocalNetChannelClient, error)
	// This method requests the local controller to shutdown
	Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*ShutdownResponse, error)
}

type localControllerAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewLocalControllerAPIClient(cc grpc.ClientConnInterface) LocalControllerAPIClient {
	return &localControllerAPIClient{cc}
}

func (c *localControllerAPIClient) ApplySandbox(ctx context.Context, in *ApplySandboxRequest, opts ...grpc.CallOption) (*ApplySandboxResponse, error) {
	out := new(ApplySandboxResponse)
	err := c.cc.Invoke(ctx, LocalControllerAPI_ApplySandbox_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localControllerAPIClient) CheckSandbox(ctx context.Context, in *CheckSandboxRequest, opts ...grpc.CallOption) (*CheckSandboxResponse, error) {
	out := new(CheckSandboxResponse)
	err := c.cc.Invoke(ctx, LocalControllerAPI_CheckSandbox_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localControllerAPIClient) DeleteSandbox(ctx context.Context, in *DeleteSandboxRequest, opts ...grpc.CallOption) (*DeleteSandboxResponse, error) {
	out := new(DeleteSandboxResponse)
	err := c.cc.Invoke(ctx, LocalControllerAPI_DeleteSandbox_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localControllerAPIClient) LocalNetChannel(ctx context.Context, opts ...grpc.CallOption) (LocalControllerAPI_LocalNetChannelClient, error) {
	stream, err := c.cc.NewStream(ctx, &LocalControllerAPI_ServiceDesc.Streams[0], LocalControllerAPI_LocalNetChannel_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &localControllerAPILocalNetChannelClient{stream}
	return x, nil
}

type LocalControllerAPI_LocalNetChannelClient interface {
	Send(*LocalNetEvent) error
	Recv() (*LocalNetAction, error)
	grpc.ClientStream
}

type localControllerAPILocalNetChannelClient struct {
	grpc.ClientStream
}

func (x *localControllerAPILocalNetChannelClient) Send(m *LocalNetEvent) error {
	return x.ClientStream.SendMsg(m)
}

func (x *localControllerAPILocalNetChannelClient) Recv() (*LocalNetAction, error) {
	m := new(LocalNetAction)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *localControllerAPIClient) Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*ShutdownResponse, error) {
	out := new(ShutdownResponse)
	err := c.cc.Invoke(ctx, LocalControllerAPI_Shutdown_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LocalControllerAPIServer is the server API for LocalControllerAPI service.
// All implementations must embed UnimplementedLocalControllerAPIServer
// for forward compatibility
type LocalControllerAPIServer interface {
	// This method is used to create a sandbox with local references.
	// The local controller (signadot local connect) should be running,
	// otherwise it will return an error
	ApplySandbox(context.Context, *ApplySandboxRequest) (*ApplySandboxResponse, error)
	// This method tells if a given sandbox is managed by the local controller
	// or not
	CheckSandbox(context.Context, *CheckSandboxRequest) (*CheckSandboxResponse, error)
	// This method requests the deletion of a sandbox. It will fail if the specified
	// sandbox is not managed by the local controller
	DeleteSandbox(context.Context, *DeleteSandboxRequest) (*DeleteSandboxResponse, error)
	// This is a communication channel between the localnet process and the
	// local controller. It assumes that the connection is established by the
	// localnet process.
	LocalNetChannel(LocalControllerAPI_LocalNetChannelServer) error
	// This method requests the local controller to shutdown
	Shutdown(context.Context, *ShutdownRequest) (*ShutdownResponse, error)
	mustEmbedUnimplementedLocalControllerAPIServer()
}

// UnimplementedLocalControllerAPIServer must be embedded to have forward compatible implementations.
type UnimplementedLocalControllerAPIServer struct {
}

func (UnimplementedLocalControllerAPIServer) ApplySandbox(context.Context, *ApplySandboxRequest) (*ApplySandboxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplySandbox not implemented")
}
func (UnimplementedLocalControllerAPIServer) CheckSandbox(context.Context, *CheckSandboxRequest) (*CheckSandboxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckSandbox not implemented")
}
func (UnimplementedLocalControllerAPIServer) DeleteSandbox(context.Context, *DeleteSandboxRequest) (*DeleteSandboxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSandbox not implemented")
}
func (UnimplementedLocalControllerAPIServer) LocalNetChannel(LocalControllerAPI_LocalNetChannelServer) error {
	return status.Errorf(codes.Unimplemented, "method LocalNetChannel not implemented")
}
func (UnimplementedLocalControllerAPIServer) Shutdown(context.Context, *ShutdownRequest) (*ShutdownResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shutdown not implemented")
}
func (UnimplementedLocalControllerAPIServer) mustEmbedUnimplementedLocalControllerAPIServer() {}

// UnsafeLocalControllerAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LocalControllerAPIServer will
// result in compilation errors.
type UnsafeLocalControllerAPIServer interface {
	mustEmbedUnimplementedLocalControllerAPIServer()
}

func RegisterLocalControllerAPIServer(s grpc.ServiceRegistrar, srv LocalControllerAPIServer) {
	s.RegisterService(&LocalControllerAPI_ServiceDesc, srv)
}

func _LocalControllerAPI_ApplySandbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplySandboxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalControllerAPIServer).ApplySandbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocalControllerAPI_ApplySandbox_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalControllerAPIServer).ApplySandbox(ctx, req.(*ApplySandboxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalControllerAPI_CheckSandbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckSandboxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalControllerAPIServer).CheckSandbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocalControllerAPI_CheckSandbox_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalControllerAPIServer).CheckSandbox(ctx, req.(*CheckSandboxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalControllerAPI_DeleteSandbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSandboxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalControllerAPIServer).DeleteSandbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocalControllerAPI_DeleteSandbox_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalControllerAPIServer).DeleteSandbox(ctx, req.(*DeleteSandboxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalControllerAPI_LocalNetChannel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LocalControllerAPIServer).LocalNetChannel(&localControllerAPILocalNetChannelServer{stream})
}

type LocalControllerAPI_LocalNetChannelServer interface {
	Send(*LocalNetAction) error
	Recv() (*LocalNetEvent, error)
	grpc.ServerStream
}

type localControllerAPILocalNetChannelServer struct {
	grpc.ServerStream
}

func (x *localControllerAPILocalNetChannelServer) Send(m *LocalNetAction) error {
	return x.ServerStream.SendMsg(m)
}

func (x *localControllerAPILocalNetChannelServer) Recv() (*LocalNetEvent, error) {
	m := new(LocalNetEvent)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _LocalControllerAPI_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShutdownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalControllerAPIServer).Shutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocalControllerAPI_Shutdown_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalControllerAPIServer).Shutdown(ctx, req.(*ShutdownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LocalControllerAPI_ServiceDesc is the grpc.ServiceDesc for LocalControllerAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LocalControllerAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "localcontrollerapi.LocalControllerAPI",
	HandlerType: (*LocalControllerAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ApplySandbox",
			Handler:    _LocalControllerAPI_ApplySandbox_Handler,
		},
		{
			MethodName: "CheckSandbox",
			Handler:    _LocalControllerAPI_CheckSandbox_Handler,
		},
		{
			MethodName: "DeleteSandbox",
			Handler:    _LocalControllerAPI_DeleteSandbox_Handler,
		},
		{
			MethodName: "Shutdown",
			Handler:    _LocalControllerAPI_Shutdown_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "LocalNetChannel",
			Handler:       _LocalControllerAPI_LocalNetChannel_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "internal/localcontrollerapi/local_controller_api.proto",
}
