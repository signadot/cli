syntax = "proto3";

import "google/protobuf/struct.proto";
import "internal/locald/api/common.proto";

option go_package = "github.com/signadot/cli/internal/locald/api/sandboxmanager";

package sandboxmanager;


service SandboxManagerAPI {
  // This method is used to create a sandbox with local references.
  // The local controller (signadot local connect) should be running,
  // otherwise it will return an error
  rpc ApplySandbox(ApplySandboxRequest) returns (ApplySandboxResponse) {}


  // This method returns the status of the local controller
  rpc Status(StatusRequest) returns (StatusResponse) {}

  // This method requests the root controller to shutdown
  rpc Shutdown(ShutdownRequest) returns (ShutdownResponse) {}
}

// ApplySandbox
// ----------------------------------------------------------------------------

message ApplySandboxRequest {
  // sandbox name
  string name = 1;
  // sandbox spec (instance of github.com/signadot/go-sdk/models.SandboxSpec)
  google.protobuf.Struct sandbox_spec = 2;
}

message ApplySandboxResponse {
  // sandbox (instance of github.com/signadot/go-sdk/models.Sandbox)
  google.protobuf.Struct sandbox = 1;
}

// Status
// ----------------------------------------------------------------------------

message StatusRequest {
}

message StatusResponse {
  // connect invocation config
  // (instance of internal/config/locald.ConnectInvocationConfig)
  google.protobuf.Struct ci_config = 1;
  apicommon.LocalNetStatus localnet = 2;
  apicommon.HostsStatus hosts = 3;
  apicommon.PortForwardStatus portforward = 4;
  repeated apicommon.SandboxStatus sandboxes = 5;
}

// Shutdown
// ----------------------------------------------------------------------------

message ShutdownRequest {
}

message ShutdownResponse {
}