package sandbox

import (
	"fmt"
	"io"

	"github.com/signadot/cli/internal/config"
	"github.com/signadot/cli/internal/print"
	"github.com/signadot/go-sdk/client/sandboxes"
	"github.com/signadot/go-sdk/models"
	"github.com/spf13/cobra"
)

func newSetImage(sandbox *config.Sandbox) *cobra.Command {
	cfg := &config.SandboxSetImage{Sandbox: sandbox}

	cmd := &cobra.Command{
		Use:   "set-image SANDBOX_NAME --workload=WORKLOAD_NAME IMAGE",
		Short: "Set image for a workload in a sandbox",
		Args:  cobra.ExactArgs(2), // SANDBOX_NAME and IMAGE
		RunE: func(cmd *cobra.Command, args []string) error {
			sandboxName := args[0]
			image := args[1]
			return setImage(cfg, cmd.OutOrStdout(), sandboxName, image)
		},
	}
	cfg.AddFlags(cmd)
	return cmd
}

func setImage(cfg *config.SandboxSetImage, out io.Writer, sandboxName, image string) error {
	if err := cfg.InitAPIConfig(); err != nil {
		return err
	}

	// Get the current sandbox
	params := sandboxes.NewGetSandboxParams().WithOrgName(cfg.Org).WithSandboxName(sandboxName)
	result, err := cfg.Client.Sandboxes.GetSandbox(params, nil)
	if err != nil {
		return fmt.Errorf("failed to get sandbox %q: %v", sandboxName, err)
	}
	sandbox := result.Payload

	// Find the workload and update its image
	found := false
	for i, fork := range sandbox.Spec.Forks {
		if fork.ForkOf != nil && fork.ForkOf.Name != nil && *fork.ForkOf.Name == cfg.Workload {
			// Initialize customizations if not present
			if fork.Customizations == nil {
				fork.Customizations = &models.SandboxCustomizations{}
			}
			if fork.Customizations.Images == nil {
				fork.Customizations.Images = []*models.SandboxImage{}
			}

			// Add or update the image
			imageCustomization := &models.SandboxImage{
				Image: image,
			}
			fork.Customizations.Images = []*models.SandboxImage{imageCustomization}
			sandbox.Spec.Forks[i] = fork
			found = true
			break
		}
	}

	if !found {
		return fmt.Errorf("workload %q not found in sandbox %q", cfg.Workload, sandboxName)
	}

	// Apply the updated sandbox
	applyParams := sandboxes.NewApplySandboxParams().
		WithOrgName(cfg.Org).WithSandboxName(sandboxName).WithData(sandbox)
	_, err = cfg.Client.Sandboxes.ApplySandbox(applyParams, nil)
	if err != nil {
		return fmt.Errorf("failed to update sandbox %q: %v", sandboxName, err)
	}

	fmt.Fprintf(out, "Updated image for workload %q in sandbox %q to %q\n", cfg.Workload, sandboxName, image)

	// Output the updated sandbox
	switch cfg.OutputFormat {
	case config.OutputFormatDefault:
		return nil // Already printed success message
	case config.OutputFormatJSON:
		return print.RawJSON(out, sandbox)
	case config.OutputFormatYAML:
		return print.RawYAML(out, sandbox)
	default:
		return fmt.Errorf("unsupported output format: %q", cfg.OutputFormat)
	}
}
