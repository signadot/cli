package sandbox

import (
	"fmt"
	"github.com/signadot/cli/internal/utils"
	"github.com/signadot/cli/internal/utils/system"
	"github.com/signadot/go-sdk/models"
	"github.com/signadot/libconnect/common/processes"
	"io"
	"path/filepath"
	"strings"

	"github.com/signadot/cli/internal/config"
	"github.com/signadot/cli/internal/print"
	"github.com/signadot/go-sdk/client/sandboxes"
	"github.com/spf13/cobra"
)

func newMakeLocal(sandbox *config.Sandbox) *cobra.Command {
	cfg := &config.SandboxMakeLocal{Sandbox: sandbox}

	cmd := &cobra.Command{
		Use:   "make-local",
		Short: "Make a local sandbox",
		Args:  cobra.ExactArgs(0),
		RunE: func(cmd *cobra.Command, args []string) error {
			return makeLocal(cfg, cmd.OutOrStdout())
		},
	}
	cfg.AddFlags(cmd)

	return cmd
}

func makeLocal(cfg *config.SandboxMakeLocal, out io.Writer) error {
	if err := cfg.InitAPIConfig(); err != nil {
		return err
	}

	if err := checkLocalConnected(); err != nil {
		return err
	}

	// TODO: Prompt interactive selection for workload

	sandboxName := getSandboxName(cfg)

	workloadKind := "Deployment"
	namespace, name, err := getWorkloadParts(cfg.Workload)
	if err != nil {
		return err
	}

	local := models.Local{
		From: &models.LocalFrom{
			Kind:      &workloadKind,
			Name:      &name,
			Namespace: &namespace,
		},
		Mappings: nil,
		Name:     fmt.Sprintf("local-%s-%s", namespace, name),
	}

	sandbox := models.Sandbox{
		CreatedAt:  "",
		Defaults:   nil,
		Endpoints:  nil,
		Name:       sandboxName,
		RoutingKey: "",
		Spec: &models.SandboxSpec{
			Cluster:                      &cfg.Cluster,
			DefaultRouteGroup:            nil,
			Description:                  "Generated local sandbox with signadot sandbox make-local",
			DisableSandboxTrafficManager: false,
			Endpoints:                    nil,
			Forks:                        nil,
			Labels:                       nil,
			Local:                        []*models.Local{&local},
			LocalMachineID:               "",
			Resources:                    nil,
			TTL:                          nil,
		},
		Status:    nil,
		UpdatedAt: "",
	}

	params := sandboxes.NewApplySandboxParams().WithOrgName(cfg.Org).
		WithSandboxName(sandboxName).
		WithData(&sandbox)
	resp, err := cfg.Client.Sandboxes.ApplySandbox(params, nil)
	if err != nil {
		return err
	}

	switch cfg.OutputFormat {
	case config.OutputFormatDefault:
		return printSandboxDetails(cfg.Sandbox, out, resp.Payload)
	case config.OutputFormatJSON:
		return print.RawJSON(out, resp.Payload)
	case config.OutputFormatYAML:
		return print.RawYAML(out, resp.Payload)
	default:
		return fmt.Errorf("unsupported output format: %q", cfg.OutputFormat)
	}
}

func checkLocalConnected() error {
	signadotDir, err := system.GetSignadotDir()
	if err != nil {
		return err
	}

	// Make sure the sandbox manager is running
	pidfile := filepath.Join(signadotDir, config.SandboxManagerPIDFile)
	isRunning, err := processes.IsDaemonRunning(pidfile)
	if err != nil {
		return err
	}
	if !isRunning {
		return fmt.Errorf("signadot is not connected\n")
	}

	return nil
}

func getSandboxName(cfg *config.SandboxMakeLocal) string {
	if cfg.Name != "" {
		return cfg.Name
	}

	return fmt.Sprintf("autogenerated-sandbox-%s", utils.RandomString(6))
}

func getWorkloadParts(rawWorkload string) (string, string, error) {
	if rawWorkload == "" {
		return "", "", fmt.Errorf("no workload defined\n")
	}

	parts := strings.Split(rawWorkload, "/")
	if len(parts) != 2 {
		return "", "", fmt.Errorf("invalid workload format (expected namespace/name)")
	}

	namespace := parts[0]
	workloadName := parts[1]

	if namespace == "" || workloadName == "" {
		return "", "", fmt.Errorf("namespace or workload name cannot be empty")
	}

	return namespace, workloadName, nil
}
