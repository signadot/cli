// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: internal/api/localctrlapi/local_controller_api.proto

package localctrlapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LocalControllerAPI_ApplySandbox_FullMethodName = "/localctrlapi.LocalControllerAPI/ApplySandbox"
	LocalControllerAPI_Status_FullMethodName       = "/localctrlapi.LocalControllerAPI/Status"
)

// LocalControllerAPIClient is the client API for LocalControllerAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LocalControllerAPIClient interface {
	// This method is used to create a sandbox with local references.
	// The local controller (signadot local connect) should be running,
	// otherwise it will return an error
	ApplySandbox(ctx context.Context, in *ApplySandboxRequest, opts ...grpc.CallOption) (*ApplySandboxResponse, error)
	// This method returns the status of the local controller
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
}

type localControllerAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewLocalControllerAPIClient(cc grpc.ClientConnInterface) LocalControllerAPIClient {
	return &localControllerAPIClient{cc}
}

func (c *localControllerAPIClient) ApplySandbox(ctx context.Context, in *ApplySandboxRequest, opts ...grpc.CallOption) (*ApplySandboxResponse, error) {
	out := new(ApplySandboxResponse)
	err := c.cc.Invoke(ctx, LocalControllerAPI_ApplySandbox_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localControllerAPIClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, LocalControllerAPI_Status_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LocalControllerAPIServer is the server API for LocalControllerAPI service.
// All implementations must embed UnimplementedLocalControllerAPIServer
// for forward compatibility
type LocalControllerAPIServer interface {
	// This method is used to create a sandbox with local references.
	// The local controller (signadot local connect) should be running,
	// otherwise it will return an error
	ApplySandbox(context.Context, *ApplySandboxRequest) (*ApplySandboxResponse, error)
	// This method returns the status of the local controller
	Status(context.Context, *StatusRequest) (*StatusResponse, error)
	mustEmbedUnimplementedLocalControllerAPIServer()
}

// UnimplementedLocalControllerAPIServer must be embedded to have forward compatible implementations.
type UnimplementedLocalControllerAPIServer struct {
}

func (UnimplementedLocalControllerAPIServer) ApplySandbox(context.Context, *ApplySandboxRequest) (*ApplySandboxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplySandbox not implemented")
}
func (UnimplementedLocalControllerAPIServer) Status(context.Context, *StatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedLocalControllerAPIServer) mustEmbedUnimplementedLocalControllerAPIServer() {}

// UnsafeLocalControllerAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LocalControllerAPIServer will
// result in compilation errors.
type UnsafeLocalControllerAPIServer interface {
	mustEmbedUnimplementedLocalControllerAPIServer()
}

func RegisterLocalControllerAPIServer(s grpc.ServiceRegistrar, srv LocalControllerAPIServer) {
	s.RegisterService(&LocalControllerAPI_ServiceDesc, srv)
}

func _LocalControllerAPI_ApplySandbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplySandboxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalControllerAPIServer).ApplySandbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocalControllerAPI_ApplySandbox_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalControllerAPIServer).ApplySandbox(ctx, req.(*ApplySandboxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalControllerAPI_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalControllerAPIServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocalControllerAPI_Status_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalControllerAPIServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LocalControllerAPI_ServiceDesc is the grpc.ServiceDesc for LocalControllerAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LocalControllerAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "localctrlapi.LocalControllerAPI",
	HandlerType: (*LocalControllerAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ApplySandbox",
			Handler:    _LocalControllerAPI_ApplySandbox_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _LocalControllerAPI_Status_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/api/localctrlapi/local_controller_api.proto",
}
