// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: internal/api/rootctrlapi/root_controller_api.proto

package rootctrlapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RootControllerAPI_Status_FullMethodName   = "/rootctrlapi.RootControllerAPI/Status"
	RootControllerAPI_Shutdown_FullMethodName = "/rootctrlapi.RootControllerAPI/Shutdown"
)

// RootControllerAPIClient is the client API for RootControllerAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RootControllerAPIClient interface {
	// This method returns the status of the root controller
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	// This method requests the root controller to shutdown
	Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*ShutdownResponse, error)
}

type rootControllerAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewRootControllerAPIClient(cc grpc.ClientConnInterface) RootControllerAPIClient {
	return &rootControllerAPIClient{cc}
}

func (c *rootControllerAPIClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, RootControllerAPI_Status_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootControllerAPIClient) Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*ShutdownResponse, error) {
	out := new(ShutdownResponse)
	err := c.cc.Invoke(ctx, RootControllerAPI_Shutdown_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RootControllerAPIServer is the server API for RootControllerAPI service.
// All implementations must embed UnimplementedRootControllerAPIServer
// for forward compatibility
type RootControllerAPIServer interface {
	// This method returns the status of the root controller
	Status(context.Context, *StatusRequest) (*StatusResponse, error)
	// This method requests the root controller to shutdown
	Shutdown(context.Context, *ShutdownRequest) (*ShutdownResponse, error)
	mustEmbedUnimplementedRootControllerAPIServer()
}

// UnimplementedRootControllerAPIServer must be embedded to have forward compatible implementations.
type UnimplementedRootControllerAPIServer struct {
}

func (UnimplementedRootControllerAPIServer) Status(context.Context, *StatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedRootControllerAPIServer) Shutdown(context.Context, *ShutdownRequest) (*ShutdownResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shutdown not implemented")
}
func (UnimplementedRootControllerAPIServer) mustEmbedUnimplementedRootControllerAPIServer() {}

// UnsafeRootControllerAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RootControllerAPIServer will
// result in compilation errors.
type UnsafeRootControllerAPIServer interface {
	mustEmbedUnimplementedRootControllerAPIServer()
}

func RegisterRootControllerAPIServer(s grpc.ServiceRegistrar, srv RootControllerAPIServer) {
	s.RegisterService(&RootControllerAPI_ServiceDesc, srv)
}

func _RootControllerAPI_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootControllerAPIServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RootControllerAPI_Status_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootControllerAPIServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootControllerAPI_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShutdownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootControllerAPIServer).Shutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RootControllerAPI_Shutdown_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootControllerAPIServer).Shutdown(ctx, req.(*ShutdownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RootControllerAPI_ServiceDesc is the grpc.ServiceDesc for RootControllerAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RootControllerAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rootctrlapi.RootControllerAPI",
	HandlerType: (*RootControllerAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _RootControllerAPI_Status_Handler,
		},
		{
			MethodName: "Shutdown",
			Handler:    _RootControllerAPI_Shutdown_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/api/rootctrlapi/root_controller_api.proto",
}
